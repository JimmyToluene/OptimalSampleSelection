#version 430 core

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (r8i, binding = 0) uniform iimage2D coverList;

struct KTuple {
    int tuple[8];
    int score;
    int selected;
};

struct JTuple {
    int tuple[8];
    int covered;
};

uniform int kTupleCount;
uniform int jTupleCount;
uniform int s;
uniform int j;
uniform int k;

layout (std430, binding = 1) buffer KTuples
{
    KTuple kTuples[];
};

layout (std430, binding = 2) buffer JTuples
{
    JTuple jTuples[];
};

int IntersectionSize(in JTuple jTuple, in KTuple kTuple)
{
    int first1 = 0, first2 = 0;
    int last1 = j, last2 = k;
    int result = 0;

    while (first1 < last1 && first2 < last2) {
        if (jTuple.tuple[first1] < kTuple.tuple[first2]) {
            ++first1;
        } else {
            if (!(kTuple.tuple[first2] < jTuple.tuple[first1])) {
                ++first1;
                ++result;
            } 
            ++first2;
        }
    }

    return result;
}

/* gl_GlobalInvocationID is the index of k tuples by design */
void main()
{
    /* Not a valid k-tuple */
    if (gl_GlobalInvocationID.x >= kTupleCount)
        return;

    /* Reset score */
    kTuples[gl_GlobalInvocationID.x].score = 0;

    /* If the tuple is already selected, do not recompute */
    if (kTuples[gl_GlobalInvocationID.x].selected == 1)
        return;

    /* Reset coverList */
    for (int i = 0; i < jTupleCount; ++i) {
        ivec2 texelCoord = ivec2(gl_GlobalInvocationID.x, i);
        imageStore(coverList, texelCoord, ivec4(0, 0, 0, 0));
    }

    /* For each j tuple */
    for (int i = 0; i < jTupleCount; ++i) {
        if (jTuples[i].covered == 0) {
            int interescSize = IntersectionSize(jTuples[i], kTuples[gl_GlobalInvocationID.x]);  
            if (interescSize >= s) {
                ++kTuples[gl_GlobalInvocationID.x].score;
                /* Set the entry of cover list be one */
                ivec2 texelCoord = ivec2(gl_GlobalInvocationID.x, i);
                imageStore(coverList, texelCoord, ivec4(1, 0, 0, 0));
            }
        }
    }
}



